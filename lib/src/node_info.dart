/// Defines the [NodeInfo] type. This value is generated by the mDNS subsystem.
library;

import 'dart:developer' as developer;

/// Holds information about DrMem nodes. This information is obtained via the
/// mDNS announcements and by querying the node.

class NodeInfo {
  /// The name of the node. This name is not the network name but is the name
  /// the owner put in the configuration file.
  final String name;

  /// A string in the format "major.minor.patch" format indicating the version
  /// of the DrMem node. The app can use this to determine what features are
  /// supported by the node.
  final String version;

  /// This is the location of the node, as reported in the DrMem configuration
  /// file.
  final String location;

  /// A list of IP adresses / host names with which to use to connect. The mDNS
  /// announcement itself provides the location IP address. This address will
  /// always be the last entry in the list. The node is allowed to advertise
  /// a preferred address (in case the node is available from the general
  /// Internet.) If the node has a preferred address, it's prepended to the
  /// list. An application can try each of the addresses to connect to the node.
  final List<String> host;

  /// The port number used by the node.
  final int port;

  /// This is a placeholder for future security. It will contain the digital
  /// signature of the nodes SSL certificate.
  final String? signature;

  /// Indicates when the node was started.
  final DateTime bootTime;

  /// Specifies the Graphql URL endpoint used for queries.
  final String queries;

  /// Specifies the Graphql URL endpoint used for mutations.
  final String mutations;

  /// Specifies the Graphql URL endpoint used for subscription.
  final String subscriptions;

  /// This field indicates the detection of the node on the location netwok.
  /// In other words, if an mDNS announcement is received for a node, this field
  /// will be `true`. If the node stops, this field will go to `false`. Nodes
  /// not on the local network may still be accessible, even though this field
  /// is `false`.
  bool reporting;

  NodeInfo(
      {required this.name,
      required this.version,
      required this.location,
      required this.host,
      required this.port,
      this.signature,
      required this.bootTime,
      required this.queries,
      required this.mutations,
      required this.subscriptions})
      : reporting = false;

  Map<String, dynamic> toJson() => {
        'name': name,
        'version': version,
        'location': location,
        'host': host,
        'port': port,
        'signature': signature,
        'bootTime': bootTime,
        'queries': queries,
        'mutations': mutations,
        'subscriptions': subscriptions
      };

  static NodeInfo? fromJson(Map<String, dynamic> json) {
    if (json
        case {
          'name': String name,
          'version': String version,
          'location': String location,
          'host': List<String> host,
          'port': int port,
          'signature': String? signature,
          'bootTime': DateTime bootTime,
          'queries': String queries,
          'mutations': String mutations,
          'subscriptions': String subscriptions
        }) {
      return NodeInfo(
          name: name,
          version: version,
          location: location,
          host: host,
          port: port,
          signature: signature,
          bootTime: bootTime,
          queries: queries,
          mutations: mutations,
          subscriptions: subscriptions);
    }
    developer.log("couldn't restore node info for $json ... dropping from list",
        name: "NodeInfo.fromJson");
    return null;
  }
}
